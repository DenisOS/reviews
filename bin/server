#!/usr/bin/env node

/*
 * The goal is to leaRn mode about node js, mongodb and nodejitsu.
 * To that end I am creating a simple node app returns a list of
 *  my book reviews from a mongo db database
 * I added the ability to save reviews
 *
 * This code is very R&D. It is linted but not well designed nor DRY.
 *
 * I also want to call to the Google Books api from the client to
 *  add more book data where present.
 * More here: https://developers.google.com/books/docs/v1/getting_started
 *  ex: https://www.googleapis.com/books/v1/volumes?q=aftershock
 *  by id https://www.googleapis.com/books/v1/volumes/y6Qu2brXO6oC
 * 
*/

var http = require('http'),
    path = require('path'),
    fs = require('fs');
    mongodb = require('mongodb');


/*
 * reviewsStore is a javascript object which provides methods to do crud operations
 *  for book reviews. In that way persistence details are encapsulated.
 * a book review is a javascript object (reviewDoc)
 *
 * reviewstore api methods include:
 *   list - returns array of all reviews as javascript objects (reviewDoc)
 *   seed - populates reviewDocs into storage
 *   remove - removes all reviewDocs from storage
 *   add - adds a review javascript object into storage
 *
 *  You typically call it as follows:  
 *    reviewsStore.method(successCallback, errorCallback);
 *   e.g.
 *    reviewsStore.seed(successCallback, errorCallback);
 *
 */
var reviewsStore = (function() {

    var db = new mongodb.Db('nodejitsudb93315994410',
        new mongodb.Server('alex.mongohq.com', 10042, {auto_reconnect: true})
    ),

    // this function will seed data into the bookReview collection
    //
    seed = function (success, error) {
        console.log('seedData');

        db.authenticate('nodejitsu', 'a3bf2896d17cbf1cd4068210f8fa9bb8', function (err, replies) { 
            // You are now connected and authenticated.

            console.log('Err after authn is ', err);	


            // insert 2 book reviews, then close and exit
            //
            // createCollection creates the collection
            //db.createCollection('bookReviews', function(err, colln) { 
            db.collection('bookReviews', function(err, colln) {

                colln.insert({ 
                    isbn: '9780312536633',
                    title: 'The Forever War',
                    thumbImg: 'http://bks2.books.google.com/books?id=l4lxLsH2n3YC&printsec=frontcover&img=1&zoom=1&edge=curl&source=gbs_api',
                    myReview: 'I loved this book, read it over Labor Day holiday weekend when I really needed to rest and relax. I really like how easy it is to read and believe in. I easily believed what the author was writing'
                }, function(){});

                colln.insert({ 
                    isbn: '9780307592811',
                    title: 'Aftershock',
                    thumbImg: 'http://bks2.books.google.com/books?id=y6Qu2brXO6oC&printsec=frontcover&img=1&zoom=1&edge=curl&source=gbs_api',
                    myReview: 'I feel like the Obama administration and their message of building up the middle class have been reading this authors work, and about time too! '
                }, function(){});

                // invoke the success callback
                success();  
			
            });
        });
    },

    // this function will empty the bookReview collection
    //
    remove = function (success, error) {
        console.log('removeData');

        db.authenticate('nodejitsu', 'a3bf2896d17cbf1cd4068210f8fa9bb8', function (err, replies) {   
            db.collection('bookReviews', function(err, colln) {

                //  removes all
                colln.remove({}, {safe:true}, function(err, num) {
                    console.log('Err after remove is ', err, num);  
                }); 

                // deletes one,
                //colln.remove({googleId: 'l4lxLsH2n3YC'}, {safe:true}, function(err, num) {
                //		console.log('Err after remove is ', err, num);	
                //});	

                // invoke the success callback
                success();           
            });
        });
    },
    
    // this function will return the bookReview collection contents embedded in index page
    //  thereby bootstrapping the client with data
    //
    list = function (success, error) {
        var fileContents;

        console.log('home page requested');

        db.authenticate('nodejitsu', 'a3bf2896d17cbf1cd4068210f8fa9bb8', function (err, replies) { 
            // You are now connected and authenticated.

            console.log('Authn status ', err);	

            // read book reviews
            db.collection('bookReviews', function(err, collection) {

                // toArray() is a shortcut which will not work for large sets of data
                //   would have to use stream or pagination or other for larger, real world
                //
                collection.find().toArray(function(err, items) {
                    console.log('reviews: ', items);

                    // call the success callback with items
                    success(items);	
                }); 
            });
        });
    },

    /*
     * this function will add a new review to the storage
     *
     * @param {object} reviewDoc to persist
     * @param {Function} succcess callback
     */   
    add = function(reviewDoc, success, error) {
        var postData = '';

        console.log('addReview');

        db.authenticate('nodejitsu', 'a3bf2896d17cbf1cd4068210f8fa9bb8', function (err, replies) {          
            // You are now connected and authenticated.

            // insert the book review
            // 
            db.collection('bookReviews', function(err, colln) {
                                
                colln.insert(reviewDoc, function(){});

                success();
                             
            });
        });
    };
    
    // open the db connection at start, 
    // will be available for all subsequent requests
    // expect there's a cleaner way to do this but this is just a POC
    //
    db.open(function (err, db_p) {
        if (err) { throw err; }
    }); 

    return {
        add: add,
        remove: remove,
        list: list,
        seed: seed
    };
}());

var mimeTypes = {
    '.js' : 'text/javascript',
    '.html': 'text/html',
    '.css' : 'text/css'
};

// return http response
var writeSimpleResponse = function(res, httpCode, data) {
    res.writeHead(httpCode, {'Content-Type': 'text/html'});

    if (data) {
        res.end(data);
    } else {
        res.end();    
    }
 
}; 

// this function will seed data into the bookReview collection
//
var seedAll = function (req, res) {
    console.log('seedData');

    reviewsStore.seed(function() {
        writeSimpleResponse(res, 200);
    });
};

// this function will seed data into the bookReview collection
//
var removeAll = function (req, res) {
    console.log('removeAll');

    reviewsStore.remove(function() {
        writeSimpleResponse(res, 200);
    });
};

// this function will return the bookReview collection contents embedded in index page
//  thereby bootstrapping the client with data
//
var home = function (req, res) {
    var fileContents;

    console.log('home page requested');

    reviewsStore.list(function (reviews) {
        // ok, this is a little hokey but it works for now
        // read file contents, when pass encoding then response is a string
        //  and replace placeholder string with json data from mongodb find()
        fileContents = fs.readFileSync(__dirname + '/content/index.html', 'utf8');
        fileContents = fileContents.replace('%Reviews_PH%', JSON.stringify(reviews));

        // now write the file contents
        writeSimpleResponse(res, 200, fileContents);
    });
};


// this function will add a new review to the storage
//
var addReview = function(req, res) {
    var postData = '';

    console.log('addReview');

    // from node.js cookbook 
    //  and http://blog.frankgrimm.net/2010/11/howto-access-http-message-body-post-data-in-node-js/
    //
    req.on('data', function(chunk) {
        postData += chunk;
    }).on('end', function() {
        console.log('Data posted: ', postData);

        postData = JSON.parse(postData);

        // check postData is valid (very minimal for now)
        // add default thumb image if non present
        if (postData && postData.isbn && postData.review) {

            console.log("postData is: ", postData);

            reviewsStore.add(postData, function() {
                writeSimpleResponse(res, 200);
            });

        } else {
            // return 400 code
        }
    
    });
};


// handler to just straight return requested asset e.g. js, css etc.
var asset = function (req, res) {
	// now write the file contents
	res.writeHead(200, {'Content-Type': mimeTypes[path.extname(decodeURI(req.url))]});
	res.end(fs.readFileSync(__dirname + req.url));	
};


// these are the web apps route metadata
// object key matches a route e.g. /, /seed
//  object value is the fn to call e.g. listData
//
var reviewRoutes = {
	'/': home,
	'/seed': seedAll,
	'/remove': removeAll,
	'asset': asset,
    '/reviews': addReview
};



function lookupRoute(req) {
    var url = decodeURI(req.url);

	// treat js, css and images as assets
	if (url && (url.indexOf('.js') !== -1 || url.indexOf('.css') !== -1)) {
		url = 'asset';
	}

    // really kludgy but if posting a new review then handle it
    if (req.method === 'POST' && url.indexOf('reviews') !== -1) {
        url = '/reviews';
    }

	// find the route for the url url
	return reviewRoutes[url];
}

// createServer creates a server listening on port 8080 and the 
//  callback is called when requests are received.
//
http.createServer(function (req, res) {
	var routeFn;

	// ignore favicon (sorry)
	if (req.url === '/favicon.ico') {
		res.end();
		return;
	}	

	console.log("url requested: ", req.url);

	// find route for request
	// if no route found then then return error page
	//
	routeFn = lookupRoute(req);
	if (! routeFn) {
		res.writeHead(404, {'Content-Type': 'text/html'});            //
		res.end('Sorry, Page Not Found!');    // write string passed and then end
		return; // exit
	}

	// ok, we have a route match so execute the route
	//
	routeFn(req, res);

}).listen(8080);


console.log('> http server has started on port 8080');



/*  mongodb cursor example

var listData = function (res) {
	var buffer;

	console.log('listData');

    db.authenticate('nodejitsu', 'a3bf2896d17cbf1cd4068210f8fa9bb8', function (err, replies) { 
        // You are now connected and authenticated.

        console.log('Err after authn is ', err);	

        // read book reviews
        db.collection('bookReviews', function(err, collection) {
            collection.find(function(err, cursor) {
                cursor.each(function(err, item) {
                    console.log('book: ', item);

                    //res.end(fs.readFileSync(__dirname + '/index.html'));	
                });
            }); 
        });
    });
};
*/
